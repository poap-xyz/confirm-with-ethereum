{"version":3,"file":"verify.js","names":["_helpers","require","_ethers","_excluded","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","verify_message","claimed_message","signature","address","log","confirmed_signatory","utils","verifyMessage","normalize_string","message_valid","e","confirm_action","signed_message","throw_on_fail","is_valid","Error","undefined","sanetised_message","remove_comments","_JSON$parse","JSON","parse","timestamp","action"],"sources":["../../../src/modules/verify.js"],"sourcesContent":["import { log, remove_comments, normalize_string } from \"./helpers\"\nimport { utils } from 'ethers'\n\nconst verify_message = ( { claimed_message, signature, address } ) => {\n\n    try {\n\n        log( `Verifying claimed message `, claimed_message, ` on behalf of `, address )\n\n        // Check that the signed message equals the claimed message\n        let confirmed_signatory = utils.verifyMessage( claimed_message, signature )\n\n        // Normalisations\n        confirmed_signatory = normalize_string( confirmed_signatory )\n        address = normalize_string( address )\n\n        // Verify that the claimed signatory is the one that signed the message\n        const message_valid = confirmed_signatory === address\n\n        log( `Message was signed by ${ confirmed_signatory }, valid: `, message_valid )\n\n        // Verify that the claimed signatory is the one that signed the message\n        return message_valid\n\n\n    } catch ( e ) {\n\n        log( `Verification error: `, e )\n        return false\n\n    }\n\n}\n\n/**\n* Return object of the action confirmation function\n* @typedef {Object} ConfirmedAction \n* @property {Object} action - the javascript object that was submitted with the sign_action function\n* @property {String} address - the address of the signer, normalised to lowercase\n* @property {Number} timestamp - the timestamp at which this signature was created \n*/\n/**\n* Verify that a signature is valid, and parse it's json\n* @param {Object} signed_message - a formatted message as created by the frontend sign_message function\n* @param {String} signed_message.claimed_message - the message the user claims to have signed, this contains the json you signed\n* @param {String} signed_message.claimed_signatory - the address the user claimed signed this message\n* @param {String} signed_message.signature - the signature the user provided\n* @returns {ConfirmedAction} - a confirmed action object\n*/\nexport default function confirm_action ( signed_message, throw_on_fail=true ) {\n\n    // Check if the signed message is valid\n    const is_valid = verify_message( signed_message )\n    if( !is_valid && throw_on_fail ) throw new Error( `This message is NOT valid` )\n    if( !is_valid && !throw_on_fail ) return undefined\n\n    // Parse message if it was valid\n    const { claimed_message, address } = signed_message\n    const sanetised_message = remove_comments( claimed_message )\n    const { timestamp, ...action } = JSON.parse( sanetised_message )\n\n    // Return the parsed json\n    return {\n        action,\n        address,\n        timestamp\n    }\n\n}\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAA8B,MAAAE,SAAA;AAAA,SAAAC,yBAAAC,MAAA,EAAAC,QAAA,QAAAD,MAAA,yBAAAE,MAAA,GAAAC,6BAAA,CAAAH,MAAA,EAAAC,QAAA,OAAAG,GAAA,EAAAC,CAAA,MAAAC,MAAA,CAAAC,qBAAA,QAAAC,gBAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAP,MAAA,QAAAK,CAAA,MAAAA,CAAA,GAAAG,gBAAA,CAAAC,MAAA,EAAAJ,CAAA,MAAAD,GAAA,GAAAI,gBAAA,CAAAH,CAAA,OAAAJ,QAAA,CAAAS,OAAA,CAAAN,GAAA,uBAAAE,MAAA,CAAAK,SAAA,CAAAC,oBAAA,CAAAC,IAAA,CAAAb,MAAA,EAAAI,GAAA,aAAAF,MAAA,CAAAE,GAAA,IAAAJ,MAAA,CAAAI,GAAA,cAAAF,MAAA;AAAA,SAAAC,8BAAAH,MAAA,EAAAC,QAAA,QAAAD,MAAA,yBAAAE,MAAA,WAAAY,UAAA,GAAAR,MAAA,CAAAS,IAAA,CAAAf,MAAA,OAAAI,GAAA,EAAAC,CAAA,OAAAA,CAAA,MAAAA,CAAA,GAAAS,UAAA,CAAAL,MAAA,EAAAJ,CAAA,MAAAD,GAAA,GAAAU,UAAA,CAAAT,CAAA,OAAAJ,QAAA,CAAAS,OAAA,CAAAN,GAAA,kBAAAF,MAAA,CAAAE,GAAA,IAAAJ,MAAA,CAAAI,GAAA,YAAAF,MAAA;AAE9B,MAAMc,cAAc,GAAGA,CAAE;EAAEC,eAAe;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAM;EAElE,IAAI;IAEA,IAAAC,YAAG,EAAG,4BAA2B,EAAEH,eAAe,EAAG,gBAAe,EAAEE,OAAO,CAAE;IAG/E,IAAIE,mBAAmB,GAAGC,aAAK,CAACC,aAAa,CAAEN,eAAe,EAAEC,SAAS,CAAE;IAG3EG,mBAAmB,GAAG,IAAAG,yBAAgB,EAAEH,mBAAmB,CAAE;IAC7DF,OAAO,GAAG,IAAAK,yBAAgB,EAAEL,OAAO,CAAE;IAGrC,MAAMM,aAAa,GAAGJ,mBAAmB,KAAKF,OAAO;IAErD,IAAAC,YAAG,EAAG,yBAAyBC,mBAAqB,WAAU,EAAEI,aAAa,CAAE;IAG/E,OAAOA,aAAa;EAGxB,CAAC,CAAC,OAAQC,CAAC,EAAG;IAEV,IAAAN,YAAG,EAAG,sBAAqB,EAAEM,CAAC,CAAE;IAChC,OAAO,KAAK;EAEhB;AAEJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASC,cAAcA,CAAGC,cAAc,EAAEC,aAAa,GAAC,IAAI,EAAG;EAG1E,MAAMC,QAAQ,GAAGd,cAAc,CAAEY,cAAc,CAAE;EACjD,IAAI,CAACE,QAAQ,IAAID,aAAa,EAAG,MAAM,IAAIE,KAAK,CAAG,2BAA0B,CAAE;EAC/E,IAAI,CAACD,QAAQ,IAAI,CAACD,aAAa,EAAG,OAAOG,SAAS;EAGlD,MAAM;IAAEf,eAAe;IAAEE;EAAQ,CAAC,GAAGS,cAAc;EACnD,MAAMK,iBAAiB,GAAG,IAAAC,wBAAe,EAAEjB,eAAe,CAAE;EAC5D,MAAAkB,WAAA,GAAiCC,IAAI,CAACC,KAAK,CAAEJ,iBAAiB,CAAE;IAA1D;MAAEK;IAAqB,CAAC,GAAAH,WAAA;IAARI,MAAM,GAAAxC,wBAAA,CAAAoC,WAAA,EAAArC,SAAA;EAG5B,OAAO;IACHyC,MAAM;IACNpB,OAAO;IACPmB;EACJ,CAAC;AAEL"}