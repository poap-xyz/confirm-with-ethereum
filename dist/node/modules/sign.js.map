{"version":3,"file":"sign.js","names":["eth_address_regex","log","normalize_string","commented_text","require","sign_action","_x","_x2","_x3","_sign_action","apply","arguments","_asyncToGenerator","action","signer","message_prompt","add_timestamp","Error","address","getAddress","match","JSON","parse","stringify","e","_objectSpread","timestamp","Date","now","stringified_action","claimed_message","signature","signMessage","formatted_signature"],"sources":["../../../src/modules/sign.js"],"sourcesContent":["const { eth_address_regex, log, normalize_string, commented_text } = require( './helpers' )\n\n/**\n* The return object of a signed action\n* @typedef {Object} SignedAction \n* @property {String} claimed_message - the message we expect the signer to have signed in plain text \n* @property {String} signature - the cryptographic signature the signer provided\n* @property {String} address - the lowercase address that the signer claimed to have signed with\n*/\n\n/**\n* Action-signing function that decorates the action for user friendliness\n* @param {Object} action - an object containing the data you want to send along with this action\n* @param {String} [message_prompt] - a message describing what this action signature is for, it will be shown to the user but entirely disregarded by the action verification\n* @param {Object} signer - the signer of the currently connected wallet, see https://docs.ethers.org/v5/api/signer/\n* @param {Boolean} add_timestamp - whether to add a timestamp to the signature\n* @returns {SignedAction} signed action object\n*/\nexport default async function sign_action( action, signer, message_prompt, add_timestamp=true ) {\n\n    // Desctucture message\n    if( !action ) throw new Error( `Please specify what action you want signed` )\n\n    log( `Requesting signature for: `, action )\n    if( message_prompt ) log( `Message prompt: `, message_prompt )\n\n    // Check that we have a valid signer to work with\n    if( !signer ) throw new Error( `No signer specified, are you connected to your wallet?` )\n\n    // Get the address from the signer\n    let address = await signer.getAddress()\n\n    /* ///////////////////////////////\n    // Validations and normalisations */\n\n    // Make sure address is valid, lowercase, and trimmed\n    if( !address ) throw new Error( `Please specify what address you expect to sign this message` )\n    address = normalize_string( address )\n    if( !address.match( eth_address_regex ) ) throw new Error( `${ address } is not a valid Ethereum address` )\n\n    // Check that input it a valid js object\n    try {\n        action = JSON.parse( JSON.stringify( action ) )\n    } catch ( e ) {\n        throw new Error( `message format is not JSON` )\n    }\n\n    /* ///////////////////////////////\n    // Generate user-friendly message */\n\n    // Add timestamp to message\n    if( add_timestamp ) action = { ...action, timestamp: Date.now() }\n\n    // Format user-friendly message\n    const stringified_action = JSON.stringify( action, null, 2 )\n    let claimed_message = stringified_action\n    if( message_prompt ) {\n        claimed_message = commented_text( message_prompt )\n        claimed_message += stringified_action\n    }\n\n    // Sign the message\n    log( `Triggering signing of: `, claimed_message )\n    const signature = await signer.signMessage( claimed_message )\n\n    // Format the signature with it's message and claimed recipient\n    const formatted_signature = {\n        claimed_message,\n        signature,\n        address\n    }\n\n    log( `Signed `, formatted_signature )\n    return formatted_signature\n\n}"],"mappings":";;;;;;;;;;;;;AAAA,MAAM;EAAEA,iBAAiB;EAAEC,GAAG;EAAEC,gBAAgB;EAAEC;AAAe,CAAC,GAAGC,OAAO,CAAE,WAAW,CAAE;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAQ8BC,WAAWA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,CAA1B,WAA4BC,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,aAAa,GAAC,IAAI,EAAG;IAE5F;IACA,IAAI,CAACH,MAAM,EAAG,MAAM,IAAII,KAAK,CAAG,4CAA2C,CAAE;IAE7EhB,GAAG,CAAG,4BAA2B,EAAEY,MAAM,CAAE;IAC3C,IAAIE,cAAc,EAAGd,GAAG,CAAG,kBAAiB,EAAEc,cAAc,CAAE;;IAE9D;IACA,IAAI,CAACD,MAAM,EAAG,MAAM,IAAIG,KAAK,CAAG,wDAAuD,CAAE;;IAEzF;IACA,IAAIC,OAAO,SAASJ,MAAM,CAACK,UAAU,EAAE;;IAEvC;AACJ;;IAEI;IACA,IAAI,CAACD,OAAO,EAAG,MAAM,IAAID,KAAK,CAAG,6DAA4D,CAAE;IAC/FC,OAAO,GAAGhB,gBAAgB,CAAEgB,OAAO,CAAE;IACrC,IAAI,CAACA,OAAO,CAACE,KAAK,CAAEpB,iBAAiB,CAAE,EAAG,MAAM,IAAIiB,KAAK,CAAG,GAAGC,OAAS,kCAAiC,CAAE;;IAE3G;IACA,IAAI;MACAL,MAAM,GAAGQ,IAAI,CAACC,KAAK,CAAED,IAAI,CAACE,SAAS,CAAEV,MAAM,CAAE,CAAE;IACnD,CAAC,CAAC,OAAQW,CAAC,EAAG;MACV,MAAM,IAAIP,KAAK,CAAG,4BAA2B,CAAE;IACnD;;IAEA;AACJ;;IAEI;IACA,IAAID,aAAa,EAAGH,MAAM,GAAAY,aAAA,CAAAA,aAAA,KAAQZ,MAAM;MAAEa,SAAS,EAAEC,IAAI,CAACC,GAAG;IAAE,EAAE;;IAEjE;IACA,MAAMC,kBAAkB,GAAGR,IAAI,CAACE,SAAS,CAAEV,MAAM,EAAE,IAAI,EAAE,CAAC,CAAE;IAC5D,IAAIiB,eAAe,GAAGD,kBAAkB;IACxC,IAAId,cAAc,EAAG;MACjBe,eAAe,GAAG3B,cAAc,CAAEY,cAAc,CAAE;MAClDe,eAAe,IAAID,kBAAkB;IACzC;;IAEA;IACA5B,GAAG,CAAG,yBAAwB,EAAE6B,eAAe,CAAE;IACjD,MAAMC,SAAS,SAASjB,MAAM,CAACkB,WAAW,CAAEF,eAAe,CAAE;;IAE7D;IACA,MAAMG,mBAAmB,GAAG;MACxBH,eAAe;MACfC,SAAS;MACTb;IACJ,CAAC;IAEDjB,GAAG,CAAG,SAAQ,EAAEgC,mBAAmB,CAAE;IACrC,OAAOA,mBAAmB;EAE9B,CAAC;EAAA,OAAAxB,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}