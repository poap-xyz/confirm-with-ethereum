{"version":3,"file":"verify.js","names":["log","remove_comments","normalize_string","utils","verify_message","_ref","claimed_message","signature","address","confirmed_signatory","verifyMessage","message_valid","concat","e","confirm_action","signed_message","throw_on_fail","arguments","length","undefined","is_valid","Error","sanetised_message","_JSON$parse","JSON","parse","timestamp","action","_objectWithoutProperties","_excluded"],"sources":["../../../src/modules/verify.js"],"sourcesContent":["import { log, remove_comments, normalize_string } from \"./helpers\"\nimport { utils } from 'ethers'\n\nconst verify_message = ( { claimed_message, signature, address } ) => {\n\n    try {\n\n        log( `Verifying claimed message `, claimed_message, ` on behalf of `, address )\n\n        // Check that the signed message equals the claimed message\n        let confirmed_signatory = utils.verifyMessage( claimed_message, signature )\n\n        // Normalisations\n        confirmed_signatory = normalize_string( confirmed_signatory )\n        address = normalize_string( address )\n\n        // Verify that the claimed signatory is the one that signed the message\n        const message_valid = confirmed_signatory === address\n\n        log( `Message was signed by ${ confirmed_signatory }, valid: `, message_valid )\n\n        // Verify that the claimed signatory is the one that signed the message\n        return message_valid\n\n\n    } catch ( e ) {\n\n        log( `Verification error: `, e )\n        return false\n\n    }\n\n}\n\n/**\n* Return object of the action confirmation function\n* @typedef {Object} ConfirmedAction \n* @property {Object} action - the javascript object that was submitted with the sign_action function\n* @property {String} address - the address of the signer, normalised to lowercase\n* @property {Number} timestamp - the timestamp at which this signature was created \n*/\n/**\n* Verify that a signature is valid, and parse it's json\n* @param {Object} signed_message - a formatted message as created by the frontend sign_message function\n* @param {String} signed_message.claimed_message - the message the user claims to have signed, this contains the json you signed\n* @param {String} signed_message.claimed_signatory - the address the user claimed signed this message\n* @param {String} signed_message.signature - the signature the user provided\n* @returns {ConfirmedAction} - a confirmed action object\n*/\nexport default function confirm_action ( signed_message, throw_on_fail=true ) {\n\n    // Check if the signed message is valid\n    const is_valid = verify_message( signed_message )\n    if( !is_valid && throw_on_fail ) throw new Error( `This message is NOT valid` )\n    if( !is_valid && !throw_on_fail ) return undefined\n\n    // Parse message if it was valid\n    const { claimed_message, address } = signed_message\n    const sanetised_message = remove_comments( claimed_message )\n    const { timestamp, ...action } = JSON.parse( sanetised_message )\n\n    // Return the parsed json\n    return {\n        action,\n        address,\n        timestamp\n    }\n\n}\n"],"mappings":";;;AAAA,SAASA,GAAG,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,WAAW;AAClE,SAASC,KAAK,QAAQ,QAAQ;AAE9B,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAAkD;EAAA,IAA3CC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EAE1D,IAAI;IAEAR,GAAG,+BAAgCM,eAAe,oBAAoBE,OAAO,CAAE;IAG/E,IAAIC,mBAAmB,GAAGN,KAAK,CAACO,aAAa,CAAEJ,eAAe,EAAEC,SAAS,CAAE;IAG3EE,mBAAmB,GAAGP,gBAAgB,CAAEO,mBAAmB,CAAE;IAC7DD,OAAO,GAAGN,gBAAgB,CAAEM,OAAO,CAAE;IAGrC,IAAMG,aAAa,GAAGF,mBAAmB,KAAKD,OAAO;IAErDR,GAAG,0BAAAY,MAAA,CAA4BH,mBAAmB,gBAAcE,aAAa,CAAE;IAG/E,OAAOA,aAAa;EAGxB,CAAC,CAAC,OAAQE,CAAC,EAAG;IAEVb,GAAG,yBAA0Ba,CAAC,CAAE;IAChC,OAAO,KAAK;EAEhB;AAEJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAGC,cAAc,EAAuB;EAAA,IAArBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,IAAI;EAGvE,IAAMG,QAAQ,GAAGhB,cAAc,CAAEW,cAAc,CAAE;EACjD,IAAI,CAACK,QAAQ,IAAIJ,aAAa,EAAG,MAAM,IAAIK,KAAK,6BAA+B;EAC/E,IAAI,CAACD,QAAQ,IAAI,CAACJ,aAAa,EAAG,OAAOG,SAAS;EAGlD,IAAQb,eAAe,GAAcS,cAAc,CAA3CT,eAAe;IAAEE,OAAO,GAAKO,cAAc,CAA1BP,OAAO;EAChC,IAAMc,iBAAiB,GAAGrB,eAAe,CAAEK,eAAe,CAAE;EAC5D,IAAAiB,WAAA,GAAiCC,IAAI,CAACC,KAAK,CAAEH,iBAAiB,CAAE;IAAxDI,SAAS,GAAAH,WAAA,CAATG,SAAS;IAAKC,MAAM,GAAAC,wBAAA,CAAAL,WAAA,EAAAM,SAAA;EAG5B,OAAO;IACHF,MAAM,EAANA,MAAM;IACNnB,OAAO,EAAPA,OAAO;IACPkB,SAAS,EAATA;EACJ,CAAC;AAEL"}