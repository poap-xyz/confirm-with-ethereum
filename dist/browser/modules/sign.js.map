{"version":3,"file":"sign.js","names":["_require","require","eth_address_regex","log","normalize_string","commented_text","sign_action","_x","_x2","_x3","_sign_action","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","signer","message_prompt","add_timestamp","address","stringified_action","claimed_message","signature","formatted_signature","_args","wrap","_callee$","_context","prev","next","length","undefined","Error","getAddress","sent","match","concat","JSON","parse","stringify","t0","_objectSpread","timestamp","Date","now","signMessage","abrupt","stop"],"sources":["../../../src/modules/sign.js"],"sourcesContent":["const { eth_address_regex, log, normalize_string, commented_text } = require( './helpers' )\n\n/**\n* The return object of a signed action\n* @typedef {Object} SignedAction \n* @property {String} claimed_message - the message we expect the signer to have signed in plain text \n* @property {String} signature - the cryptographic signature the signer provided\n* @property {String} address - the lowercase address that the signer claimed to have signed with\n*/\n\n/**\n* Action-signing function that decorates the action for user friendliness\n* @param {Object} action - an object containing the data you want to send along with this action\n* @param {String} [message_prompt] - a message describing what this action signature is for, it will be shown to the user but entirely disregarded by the action verification\n* @param {Object} signer - the signer of the currently connected wallet, see https://docs.ethers.org/v5/api/signer/\n* @param {Boolean} add_timestamp - whether to add a timestamp to the signature\n* @returns {SignedAction} signed action object\n*/\nexport default async function sign_action( action, signer, message_prompt, add_timestamp=true ) {\n\n    // Desctucture message\n    if( !action ) throw new Error( `Please specify what action you want signed` )\n\n    log( `Requesting signature for: `, action )\n    if( message_prompt ) log( `Message prompt: `, message_prompt )\n\n    // Check that we have a valid signer to work with\n    if( !signer ) throw new Error( `No signer specified, are you connected to your wallet?` )\n\n    // Get the address from the signer\n    let address = await signer.getAddress()\n\n    /* ///////////////////////////////\n    // Validations and normalisations */\n\n    // Make sure address is valid, lowercase, and trimmed\n    if( !address ) throw new Error( `Please specify what address you expect to sign this message` )\n    address = normalize_string( address )\n    if( !address.match( eth_address_regex ) ) throw new Error( `${ address } is not a valid Ethereum address` )\n\n    // Check that input it a valid js object\n    try {\n        action = JSON.parse( JSON.stringify( action ) )\n    } catch ( e ) {\n        throw new Error( `message format is not JSON` )\n    }\n\n    /* ///////////////////////////////\n    // Generate user-friendly message */\n\n    // Add timestamp to message\n    if( add_timestamp ) action = { ...action, timestamp: Date.now() }\n\n    // Format user-friendly message\n    const stringified_action = JSON.stringify( action, null, 2 )\n    let claimed_message = stringified_action\n    if( message_prompt ) {\n        claimed_message = commented_text( message_prompt )\n        claimed_message += stringified_action\n    }\n\n    // Sign the message\n    log( `Triggering signing of: `, claimed_message )\n    const signature = await signer.signMessage( claimed_message )\n\n    // Format the signature with it's message and claimed recipient\n    const formatted_signature = {\n        claimed_message,\n        signature,\n        address\n    }\n\n    log( `Signed `, formatted_signature )\n    return formatted_signature\n\n}"],"mappings":"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"}